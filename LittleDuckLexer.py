# Generated from LittleDuck.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,180,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,24,1,24,4,24,139,8,24,11,24,12,24,140,1,24,1,24,1,25,4,25,
        146,8,25,11,25,12,25,147,1,26,3,26,151,8,26,1,26,5,26,154,8,26,10,
        26,12,26,157,9,26,1,26,3,26,160,8,26,1,26,4,26,163,8,26,11,26,12,
        26,164,1,27,1,27,5,27,169,8,27,10,27,12,27,172,9,27,1,28,4,28,175,
        8,28,11,28,12,28,176,1,28,1,28,0,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        1,0,7,4,0,10,10,13,13,39,39,92,92,1,0,48,57,2,0,43,43,45,45,1,0,
        46,46,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,
        13,32,32,187,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,
        1,0,0,0,3,61,1,0,0,0,5,63,1,0,0,0,7,65,1,0,0,0,9,67,1,0,0,0,11,69,
        1,0,0,0,13,71,1,0,0,0,15,73,1,0,0,0,17,75,1,0,0,0,19,77,1,0,0,0,
        21,79,1,0,0,0,23,81,1,0,0,0,25,83,1,0,0,0,27,85,1,0,0,0,29,87,1,
        0,0,0,31,90,1,0,0,0,33,96,1,0,0,0,35,101,1,0,0,0,37,105,1,0,0,0,
        39,109,1,0,0,0,41,113,1,0,0,0,43,119,1,0,0,0,45,122,1,0,0,0,47,127,
        1,0,0,0,49,136,1,0,0,0,51,145,1,0,0,0,53,150,1,0,0,0,55,166,1,0,
        0,0,57,174,1,0,0,0,59,60,5,59,0,0,60,2,1,0,0,0,61,62,5,58,0,0,62,
        4,1,0,0,0,63,64,5,40,0,0,64,6,1,0,0,0,65,66,5,41,0,0,66,8,1,0,0,
        0,67,68,5,91,0,0,68,10,1,0,0,0,69,70,5,93,0,0,70,12,1,0,0,0,71,72,
        5,44,0,0,72,14,1,0,0,0,73,74,5,43,0,0,74,16,1,0,0,0,75,76,5,61,0,
        0,76,18,1,0,0,0,77,78,5,45,0,0,78,20,1,0,0,0,79,80,5,42,0,0,80,22,
        1,0,0,0,81,82,5,47,0,0,82,24,1,0,0,0,83,84,5,62,0,0,84,26,1,0,0,
        0,85,86,5,60,0,0,86,28,1,0,0,0,87,88,5,60,0,0,88,89,5,62,0,0,89,
        30,1,0,0,0,90,91,5,112,0,0,91,92,5,114,0,0,92,93,5,105,0,0,93,94,
        5,110,0,0,94,95,5,116,0,0,95,32,1,0,0,0,96,97,5,112,0,0,97,98,5,
        114,0,0,98,99,5,111,0,0,99,100,5,103,0,0,100,34,1,0,0,0,101,102,
        5,101,0,0,102,103,5,110,0,0,103,104,5,100,0,0,104,36,1,0,0,0,105,
        106,5,118,0,0,106,107,5,97,0,0,107,108,5,114,0,0,108,38,1,0,0,0,
        109,110,5,105,0,0,110,111,5,110,0,0,111,112,5,116,0,0,112,40,1,0,
        0,0,113,114,5,102,0,0,114,115,5,108,0,0,115,116,5,111,0,0,116,117,
        5,97,0,0,117,118,5,116,0,0,118,42,1,0,0,0,119,120,5,115,0,0,120,
        121,5,105,0,0,121,44,1,0,0,0,122,123,5,115,0,0,123,124,5,105,0,0,
        124,125,5,110,0,0,125,126,5,111,0,0,126,46,1,0,0,0,127,128,5,109,
        0,0,128,129,5,105,0,0,129,130,5,101,0,0,130,131,5,110,0,0,131,132,
        5,116,0,0,132,133,5,114,0,0,133,134,5,97,0,0,134,135,5,115,0,0,135,
        48,1,0,0,0,136,138,5,34,0,0,137,139,8,0,0,0,138,137,1,0,0,0,139,
        140,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,142,1,0,0,0,142,
        143,5,34,0,0,143,50,1,0,0,0,144,146,7,1,0,0,145,144,1,0,0,0,146,
        147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,52,1,0,0,0,149,151,
        7,2,0,0,150,149,1,0,0,0,150,151,1,0,0,0,151,159,1,0,0,0,152,154,
        7,1,0,0,153,152,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,
        1,0,0,0,156,158,1,0,0,0,157,155,1,0,0,0,158,160,7,3,0,0,159,155,
        1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,163,7,1,0,0,162,161,
        1,0,0,0,163,164,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,54,1,
        0,0,0,166,170,7,4,0,0,167,169,7,5,0,0,168,167,1,0,0,0,169,172,1,
        0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,56,1,0,0,0,172,170,1,0,
        0,0,173,175,7,6,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,1,0,
        0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,179,6,28,0,0,179,58,1,0,
        0,0,9,0,140,147,150,155,159,164,170,176,1,6,0,0
    ]

class LittleDuckLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SEMICOLON = 1
    COLON = 2
    OPENP = 3
    CLOSEP = 4
    OPENB = 5
    CLOSEB = 6
    COMMA = 7
    PLUS = 8
    EQUALS = 9
    MINUS = 10
    TIMES = 11
    DIVISION = 12
    MORETHAN = 13
    LESSTHAN = 14
    NOT = 15
    PRINT = 16
    PROG = 17
    END = 18
    VAR = 19
    INT = 20
    FLOAT = 21
    SI = 22
    SINO = 23
    MIENTRAS = 24
    STRING = 25
    CTE_I = 26
    CTE_F = 27
    ID = 28
    WS = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "':'", "'('", "')'", "'['", "']'", "','", "'+'", "'='", 
            "'-'", "'*'", "'/'", "'>'", "'<'", "'<>'", "'print'", "'prog'", 
            "'end'", "'var'", "'int'", "'float'", "'si'", "'sino'", "'mientras'" ]

    symbolicNames = [ "<INVALID>",
            "SEMICOLON", "COLON", "OPENP", "CLOSEP", "OPENB", "CLOSEB", 
            "COMMA", "PLUS", "EQUALS", "MINUS", "TIMES", "DIVISION", "MORETHAN", 
            "LESSTHAN", "NOT", "PRINT", "PROG", "END", "VAR", "INT", "FLOAT", 
            "SI", "SINO", "MIENTRAS", "STRING", "CTE_I", "CTE_F", "ID", 
            "WS" ]

    ruleNames = [ "SEMICOLON", "COLON", "OPENP", "CLOSEP", "OPENB", "CLOSEB", 
                  "COMMA", "PLUS", "EQUALS", "MINUS", "TIMES", "DIVISION", 
                  "MORETHAN", "LESSTHAN", "NOT", "PRINT", "PROG", "END", 
                  "VAR", "INT", "FLOAT", "SI", "SINO", "MIENTRAS", "STRING", 
                  "CTE_I", "CTE_F", "ID", "WS" ]

    grammarFileName = "LittleDuck.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


